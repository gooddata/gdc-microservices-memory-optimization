/*
 * (C) 2023 GoodData Corporation
 */
plugins {
    id("java")
    id("org.jetbrains.kotlin.jvm") version "$kotlinVersion" apply false
    id("com.diffplug.spotless") version "$spotlessPluginVersion" apply false
    id("io.gitlab.arturbosch.detekt") version "$detektVersion" apply false
    id("com.gorylenko.gradle-git-properties") version "$gradleGitPropertiesVersion" apply false
    id("com.google.protobuf") version "$protobufPluginVersion" apply false

    id 'org.jetbrains.kotlin.kapt' version "$kotlinVersion" apply false
    id 'org.jetbrains.kotlin.plugin.allopen' version "$kotlinVersion" apply false
    id 'com.github.johnrengelman.shadow' version '7.1.0' apply false
    id 'io.micronaut.application' version '3.7.6' apply false
    id 'io.micronaut.library' version '3.7.6' apply false
    id 'io.micronaut.docker' version '3.7.6' apply false
    id 'io.micronaut.crac' version '3.7.6' apply false
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

allprojects {
    apply plugin: "idea"

    group = "com.gooddata.panther"
    version = "0.0.1-SNAPSHOT"

    repositories {
        mavenCentral()
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
    }
}

subprojects {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    if (project.name != "microservices" &&
            project.name != "libraries" &&
            project.name != "common" &&
            project.name != "api-token-interface" &&
            project.name != "proto-files"
    ) {
        apply plugin: "com.github.johnrengelman.shadow"
        apply plugin: "io.micronaut.application"
        apply plugin: "io.micronaut.docker"
        apply plugin: "io.micronaut.crac"
    }

    /**
     * Avoid plugin resolution (generating build folder, package etc.) for sub-parent projects
     */
    if (project.name != "microservices" &&
        project.name != "libraries" &&
        project.name != "proto-files"
    ) {
        apply plugin: "java"
        apply plugin: "kotlin"
        apply plugin: "kotlin-kapt"
        apply plugin: "org.jetbrains.kotlin.jvm"
        apply plugin: "com.diffplug.spotless"
        apply plugin: "io.gitlab.arturbosch.detekt"
        apply plugin: "jacoco"
        apply plugin: "org.jetbrains.kotlin.kapt"
        apply plugin: "org.jetbrains.kotlin.plugin.allopen"
        apply plugin: "io.micronaut.library"

        ext.rootProjectDir = project(":").projectDir

        tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
            kotlinOptions {
                jvmTarget = javaVersion
                suppressWarnings = false
                freeCompilerArgs += ["-Xjsr305=strict", "-Xopt-in=kotlin.RequiresOptIn", "-Xallow-result-return-type"]
            }
        }

        java.sourceCompatibility = javaVersion
        java.targetCompatibility = javaVersion

        spotless {
            kotlin {
                licenseHeaderFile "$rootProjectDir/gradle/scripts/COPYRIGHT", "(import|package|@)"
            }
        }

        detekt {
            toolVersion = "$detektVersion"
            input = files("src/main/kotlin")
            config = files("$rootProjectDir/gradle/scripts/detekt-config.yml", "$rootProjectDir/gradle/scripts/detekt-config-strict.yml")
        }

        dependencies {
            implementation "io.github.microutils:kotlin-logging:$kotlinLoggingVersion"
            detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detektVersion"
        }
    }
}
