/*
 * (C) 2023 GoodData Corporation
 */
import io.gitlab.arturbosch.detekt.Detekt

plugins {
    id("java")
    id("org.springframework.boot") version "$springBootVersion" apply false
    id("io.spring.dependency-management") version "$springDependencyManagementVersion" apply false
    id("org.jetbrains.kotlin.jvm") version "$kotlinVersion" apply false
    id("org.jetbrains.kotlin.plugin.spring") version "$kotlinVersion" apply false
    id("com.diffplug.spotless") version "$spotlessPluginVersion" apply false
    id("io.gitlab.arturbosch.detekt") version "$detektVersion" apply false
    id("com.gorylenko.gradle-git-properties") version "$gradleGitPropertiesVersion" apply false
    id("com.google.protobuf") version "$protobufPluginVersion" apply false
    id("org.graalvm.buildtools.native") version "$graalvmNativeVersion" apply false
    id("com.github.johnrengelman.shadow") version '7.1.2' apply false
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

allprojects {
    apply plugin: "idea"

    group = "com.gooddata.panther"
    version = "0.0.1-SNAPSHOT"
}

subprojects {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    if (project.name != "microservices" &&
        project.name != "libraries" &&
        project.name != "proto-files" &&
        project.name != "test-utils" &&
        project.name != "api-token-interface" &&
        project.name != "invitation-interface" &&
        project.name != "common"
    ) {
        apply plugin: "org.graalvm.buildtools.native"
        apply plugin: "com.github.johnrengelman.shadow"
    }

    /**
     * Avoid plugin resolution (generating build folder, package etc.) for sub-parent projects
     */
    if (project.name != "microservices" &&
        project.name != "libraries" &&
        project.name != "proto-files"
    ) {
        apply plugin: "java"
        apply plugin: "kotlin"
        apply plugin: "kotlin-kapt"
        apply plugin: "org.springframework.boot"
        apply plugin: "io.spring.dependency-management"
        apply plugin: "org.jetbrains.kotlin.plugin.spring"
        apply plugin: "org.jetbrains.kotlin.jvm"
        apply plugin: "com.diffplug.spotless"
        apply plugin: "io.gitlab.arturbosch.detekt"

        ext.rootProjectDir = project(":").projectDir

        tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
            kotlinOptions {
                jvmTarget = javaVersion
                suppressWarnings = false
                freeCompilerArgs += ["-Xjsr305=strict", "-Xopt-in=kotlin.RequiresOptIn", "-Xallow-result-return-type"]
            }
        }

        java.sourceCompatibility = javaVersion
        java.targetCompatibility = javaVersion

        spotless {
            kotlin {
                licenseHeaderFile "$rootProjectDir/gradle/scripts/COPYRIGHT", "(import|package|@)"
            }
        }

        dependencyManagement {
            imports {
                mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
            }
        }

        detekt {
            toolVersion = "$detektVersion"
            input = files(
                    "src/main/kotlin",
                    "src/test/kotlin"
            )
            config = files("$rootProjectDir/gradle/scripts/detekt-config.yml", "$rootProjectDir/gradle/scripts/detekt-config-strict.yml")
        }

        tasks.withType(Detekt).configureEach {
            jvmTarget = javaVersion
            languageVersion = kotlinVersion
        }

        dependencies {
            implementation "io.github.microutils:kotlin-logging:$kotlinLoggingVersion"
            kapt "org.springframework.boot:spring-boot-configuration-processor"
            detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detektVersion"
        }
    }
}
